const db = require("../db/db");
const PDFDocument = require("pdfkit");
const fs = require("fs");
const path = require("path");

exports.buscarBoletas = async(req, res) => {
    const { tipoPlaca, placaCod } = req.body;

    const query = `
        SELECT 
    BV.no_boleta, 
    p.placa_inicial, 
    BV.placa_cod, 
    v.nombre AS tipo_vehiculo, 
    BV.nit_prop, 
    BV.tarjeta_circ, 
    BV.marca, 
    BV.color, 
    l.tipo_licen, 
    BV.no_licencia, 
    BV.no_doc_licencia,
    BV.dpi, 
    e.ubicacion, 
    BV.nombre, 
    es.estado
FROM boleta_vehiculo BV
INNER JOIN placa p ON p.id_placa = BV.tipo_placa
INNER JOIN vehiculos v ON v.id_vehiculo = BV.id_vehiculo
INNER JOIN extendida e ON e.id_exten = BV.extendida
INNER JOIN boleta_final bf ON bf.id_boleta = BV.id_boleta
INNER JOIN estados es ON es.id_estado = bf.estado
INNER JOIN licencia l ON l.id_licen = BV.tipo_licencia
        WHERE p.id_placa = ? AND BV.placa_cod = ? AND es.id_estado = 1;
    `;

    db.query(query, [tipoPlaca, placaCod], (err, rows) => {
        if (err) {
            console.error("Error en la consulta:", err);
            return res.status(500).json({ error: "Error al realizar la b√∫squeda" });
        }
        res.json(rows);
    });
};



exports.generarPDF = async (req, res) => {
    const { tipoPlaca, placaCod } = req.query;

    const query = `
        SELECT BV.no_boleta, p.placa_inicial, BV.placa_cod, v.nombre AS tipo_vehiculo, 
               BV.nit_prop, BV.tarjeta_circ, BV.marca, BV.color, l.tipo_licen, BV.no_licencia, 
               BV.no_doc_licencia, BV.dpi, e.ubicacion, BV.nombre, es.estado
        FROM boleta_vehiculo BV
        INNER JOIN placa p ON p.id_placa = BV.tipo_placa
        INNER JOIN vehiculos v ON v.id_vehiculo = BV.id_vehiculo
        INNER JOIN extendida e ON e.id_exten = BV.extendida
        INNER JOIN boleta_final bf ON bf.id_boleta = BV.id_boleta
        INNER JOIN estados es ON es.id_estado = bf.estado
        INNER JOIN licencia l ON l.id_licen = BV.tipo_licencia
        WHERE p.id_placa = ? AND BV.placa_cod = ? AND es.id_estado = 1;
    `;

    db.query(query, [tipoPlaca, placaCod], (err, rows) => {
        if (err) {
            console.error("Error generando PDF:", err);
            return res.status(500).json({ error: "Error generando el PDF" });
        }

        // Si hay registros, obtenemos el nombre de la placa del primer resultado
        if (rows.length > 0) {
            generarPDFconDatos(res, rows, placaCod, rows[0].placa_inicial);
        } else {
            // üîπ Si no hay registros, obtenemos el nombre de la placa desde la tabla `placa`
            const placaQuery = `SELECT placa_inicial FROM placa WHERE id_placa = ?`;

            db.query(placaQuery, [tipoPlaca], (err, result) => {
                if (err) {
                    console.error("Error obteniendo el tipo de placa:", err);
                    return res.status(500).json({ error: "Error generando el PDF" });
                }

                // Si encontramos el nombre de la placa, lo usamos; de lo contrario, mostramos el ID como fallback
                const placaNombre = result.length > 0 ? result[0].placa_inicial : tipoPlaca;
                generarPDFconDatos(res, [], placaCod, placaNombre);
            });
        }
    });
};

// üîπ **Funci√≥n auxiliar para generar el PDF con los datos obtenidos**
function generarPDFconDatos(res, rows, placaCod, placaNombre) {
    const doc = new PDFDocument({ margin: 50 });
    res.setHeader("Content-Disposition", 'attachment; filename="solvencia.pdf"');
    res.setHeader("Content-Type", "application/pdf");
    doc.pipe(res);

    // Logo
    const logoPath = path.join(__dirname, "../../public/img/logopmt.png");
    if (fs.existsSync(logoPath)) {
        doc.image(logoPath, 30, 40, { width: 60 });
    }

    // Encabezados
    doc
        .fontSize(14)
        .text("MUNICIPALIDAD DE SAN FELIPE", { align: "center", bold: true })
        .moveDown(0.5)
        .fontSize(14)
        .text("JUZGADO DE ASUNTOS MUNICIPALES DE TRANSITO", { align: "center", bold: true })
        .moveDown(2);

    // Fecha actual
      // Obtener fecha actual en formato deseado
      const fechaActual = new Date();
      const opciones = { day: 'numeric', month: 'long', year: 'numeric' };
      const fechaFormateada = fechaActual.toLocaleDateString('es-ES', opciones);
  
      // Aplicarlo en el texto del PDF
      doc
          .fontSize(11)
          .text(
              `El juzgado de Asuntos Municipales de Tr√°nsito del Municipio de San Felipe Retalhuleu hace constar que, de acuerdo con los registros correspondientes, el veh√≠culo identificado con el n√∫mero de placas de circulaci√≥n ${placaCod.toUpperCase()} TIPO ${placaNombre.toUpperCase()} al ${fechaFormateada}.`,
              { align: "justify" }
          )
          .moveDown(2);

    // Secci√≥n de multas
    if (rows.length === 0) {
        doc
            .fontSize(11)
            .text("No tiene multas pendientes de pago en materia de tr√°nsito, en base sobre la cual se le extiende la presente,", { align: "center" })
            .moveDown(2);

        // üîπ **Mostrar "SOLVENCIA DE TR√ÅNSITO" solo si NO hay multas**
        doc
            .fontSize(12)
            .text("SOLVENCIA DE TR√ÅNSITO", { align: "center" })
            .moveDown(0.2);

        // Dibujar subrayado
        const textWidth = doc.widthOfString("SOLVENCIA DE TR√ÅNSITO");
        const textX = (doc.page.width - textWidth) / 2;
        const textY = doc.y;

        doc
            .moveTo(textX, textY)
            .lineTo(textX + textWidth, textY)
            .stroke();

        doc.moveDown(1);
    } else {
        // üîπ Si hay multas, listarlas
        doc.fontSize(11).text("El veh√≠culo tiene registradas las siguientes multas:", { align: "left" }).moveDown();

        rows.forEach((row, index) => {
            doc
                .fontSize(10)
                .text(`Multa #${index + 1}`, { bold: true })
                .text(`‚Ä¢ No. Boleta: ${row.no_boleta}`)
                .text(`‚Ä¢ Placa C√≥digo: ${row.placa_cod}`)
                .text(`‚Ä¢ Tipo Veh√≠culo: ${row.tipo_vehiculo}`)
                .text(`‚Ä¢ Estado: ${row.estado}`)
                .moveDown();
        });

        // üîπ **NO mostrar "SOLVENCIA DE TR√ÅNSITO" ni su l√≠nea ni "Valor Q. 25.00" cuando hay multas**
    }

    // üîπ **Mantener el resto del contenido SIEMPRE**
    doc
    .fontSize(11)
    .text(`San Felipe, ${fechaFormateada}`, { align: "right" })
    .moveDown(1);

    doc
        .fontSize(11)
        .text("Verific√≥: __________________", { align: "left" });

    if (rows.length === 0) {
        // üîπ **Mostrar "Valor Q. 25.00" solo si NO hay multas**
        doc.text("Valor Q. 25.00", { align: "right" });
    }

    doc.moveDown(2);
    doc.text("Firma y Sello", { align: "right" });

    // Finalizar y enviar PDF
    doc.end();
}
